package com.evilgeniustechnologies.Wordrific.daomodel;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SCORE.
*/
public class ScoreDao extends AbstractDao<Score, Long> {

    public static final String TABLENAME = "SCORE";

    /**
     * Properties of entity Score.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property UpdatedAt = new Property(2, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Set = new Property(3, Integer.class, "set", false, "SET");
        public final static Property Score = new Property(4, Integer.class, "score", false, "SCORE");
        public final static Property ElapsedTime = new Property(5, Integer.class, "elapsedTime", false, "ELAPSED_TIME");
        public final static Property UserObjectId = new Property(6, String.class, "userObjectId", false, "USER_OBJECT_ID");
        public final static Property UserId = new Property(7, Long.class, "userId", false, "USER_ID");
    };

    private Query<Score> user_ScoresQuery;

    public ScoreDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCORE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'OBJECT_ID' TEXT NOT NULL ," + // 1: objectId
                "'UPDATED_AT' INTEGER NOT NULL ," + // 2: updatedAt
                "'SET' INTEGER," + // 3: set
                "'SCORE' INTEGER," + // 4: score
                "'ELAPSED_TIME' INTEGER," + // 5: elapsedTime
                "'USER_OBJECT_ID' TEXT NOT NULL ," + // 6: userObjectId
                "'USER_ID' INTEGER);"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCORE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Score entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectId());
        stmt.bindLong(3, entity.getUpdatedAt().getTime());
 
        Integer set = entity.getSet();
        if (set != null) {
            stmt.bindLong(4, set);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(5, score);
        }
 
        Integer elapsedTime = entity.getElapsedTime();
        if (elapsedTime != null) {
            stmt.bindLong(6, elapsedTime);
        }
        stmt.bindString(7, entity.getUserObjectId());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(8, userId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Score readEntity(Cursor cursor, int offset) {
        Score entity = new Score( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // objectId
            new java.util.Date(cursor.getLong(offset + 2)), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // set
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // score
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // elapsedTime
            cursor.getString(offset + 6), // userObjectId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Score entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.getString(offset + 1));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSet(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setScore(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setElapsedTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUserObjectId(cursor.getString(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Score entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Score entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "scores" to-many relationship of User. */
    public List<Score> _queryUser_Scores(Long userId) {
        synchronized (this) {
            if (user_ScoresQuery == null) {
                QueryBuilder<Score> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_ScoresQuery = queryBuilder.build();
            }
        }
        Query<Score> query = user_ScoresQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
