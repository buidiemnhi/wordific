package com.evilgeniustechnologies.Wordrific.daomodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONFIGURATION.
*/
public class ConfigurationDao extends AbstractDao<Configuration, Long> {

    public static final String TABLENAME = "CONFIGURATION";

    /**
     * Properties of entity Configuration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property UpdatedAt = new Property(2, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property GameRules = new Property(3, String.class, "gameRules", false, "GAME_RULES");
        public final static Property Base64EncodedPublicKey = new Property(4, String.class, "base64EncodedPublicKey", false, "BASE64_ENCODED_PUBLIC_KEY");
        public final static Property CorrectAnswerEasy = new Property(5, Integer.class, "correctAnswerEasy", false, "CORRECT_ANSWER_EASY");
        public final static Property CorrectAnswerMedium = new Property(6, Integer.class, "correctAnswerMedium", false, "CORRECT_ANSWER_MEDIUM");
        public final static Property CorrectAnswerHard = new Property(7, Integer.class, "correctAnswerHard", false, "CORRECT_ANSWER_HARD");
        public final static Property QuickAnswerEasy = new Property(8, Integer.class, "quickAnswerEasy", false, "QUICK_ANSWER_EASY");
        public final static Property QuickAnswerMedium = new Property(9, Integer.class, "quickAnswerMedium", false, "QUICK_ANSWER_MEDIUM");
        public final static Property QuickAnswerHard = new Property(10, Integer.class, "quickAnswerHard", false, "QUICK_ANSWER_HARD");
        public final static Property TimeForBonusEasy = new Property(11, Integer.class, "timeForBonusEasy", false, "TIME_FOR_BONUS_EASY");
        public final static Property TimeForBonusMedium = new Property(12, Integer.class, "timeForBonusMedium", false, "TIME_FOR_BONUS_MEDIUM");
        public final static Property TimeForBonusHard = new Property(13, Integer.class, "timeForBonusHard", false, "TIME_FOR_BONUS_HARD");
        public final static Property WrongAnswerEasy = new Property(14, Integer.class, "wrongAnswerEasy", false, "WRONG_ANSWER_EASY");
        public final static Property WrongAnswerMedium = new Property(15, Integer.class, "wrongAnswerMedium", false, "WRONG_ANSWER_MEDIUM");
        public final static Property WrongAnswerHard = new Property(16, Integer.class, "wrongAnswerHard", false, "WRONG_ANSWER_HARD");
        public final static Property CluePenaltyEasy = new Property(17, Integer.class, "cluePenaltyEasy", false, "CLUE_PENALTY_EASY");
        public final static Property CluePenaltyMedium = new Property(18, Integer.class, "cluePenaltyMedium", false, "CLUE_PENALTY_MEDIUM");
        public final static Property CluePenaltyHard = new Property(19, Integer.class, "cluePenaltyHard", false, "CLUE_PENALTY_HARD");
        public final static Property SkipPuzzlePenalty = new Property(20, Integer.class, "skipPuzzlePenalty", false, "SKIP_PUZZLE_PENALTY");
        public final static Property TotalTime = new Property(21, Integer.class, "totalTime", false, "TOTAL_TIME");
        public final static Property TotalPuzzles = new Property(22, Integer.class, "totalPuzzles", false, "TOTAL_PUZZLES");
    };


    public ConfigurationDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigurationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONFIGURATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'OBJECT_ID' TEXT NOT NULL ," + // 1: objectId
                "'UPDATED_AT' INTEGER NOT NULL ," + // 2: updatedAt
                "'GAME_RULES' TEXT," + // 3: gameRules
                "'BASE64_ENCODED_PUBLIC_KEY' TEXT," + // 4: base64EncodedPublicKey
                "'CORRECT_ANSWER_EASY' INTEGER," + // 5: correctAnswerEasy
                "'CORRECT_ANSWER_MEDIUM' INTEGER," + // 6: correctAnswerMedium
                "'CORRECT_ANSWER_HARD' INTEGER," + // 7: correctAnswerHard
                "'QUICK_ANSWER_EASY' INTEGER," + // 8: quickAnswerEasy
                "'QUICK_ANSWER_MEDIUM' INTEGER," + // 9: quickAnswerMedium
                "'QUICK_ANSWER_HARD' INTEGER," + // 10: quickAnswerHard
                "'TIME_FOR_BONUS_EASY' INTEGER," + // 11: timeForBonusEasy
                "'TIME_FOR_BONUS_MEDIUM' INTEGER," + // 12: timeForBonusMedium
                "'TIME_FOR_BONUS_HARD' INTEGER," + // 13: timeForBonusHard
                "'WRONG_ANSWER_EASY' INTEGER," + // 14: wrongAnswerEasy
                "'WRONG_ANSWER_MEDIUM' INTEGER," + // 15: wrongAnswerMedium
                "'WRONG_ANSWER_HARD' INTEGER," + // 16: wrongAnswerHard
                "'CLUE_PENALTY_EASY' INTEGER," + // 17: cluePenaltyEasy
                "'CLUE_PENALTY_MEDIUM' INTEGER," + // 18: cluePenaltyMedium
                "'CLUE_PENALTY_HARD' INTEGER," + // 19: cluePenaltyHard
                "'SKIP_PUZZLE_PENALTY' INTEGER," + // 20: skipPuzzlePenalty
                "'TOTAL_TIME' INTEGER," + // 21: totalTime
                "'TOTAL_PUZZLES' INTEGER);"); // 22: totalPuzzles
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONFIGURATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Configuration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectId());
        stmt.bindLong(3, entity.getUpdatedAt().getTime());
 
        String gameRules = entity.getGameRules();
        if (gameRules != null) {
            stmt.bindString(4, gameRules);
        }
 
        String base64EncodedPublicKey = entity.getBase64EncodedPublicKey();
        if (base64EncodedPublicKey != null) {
            stmt.bindString(5, base64EncodedPublicKey);
        }
 
        Integer correctAnswerEasy = entity.getCorrectAnswerEasy();
        if (correctAnswerEasy != null) {
            stmt.bindLong(6, correctAnswerEasy);
        }
 
        Integer correctAnswerMedium = entity.getCorrectAnswerMedium();
        if (correctAnswerMedium != null) {
            stmt.bindLong(7, correctAnswerMedium);
        }
 
        Integer correctAnswerHard = entity.getCorrectAnswerHard();
        if (correctAnswerHard != null) {
            stmt.bindLong(8, correctAnswerHard);
        }
 
        Integer quickAnswerEasy = entity.getQuickAnswerEasy();
        if (quickAnswerEasy != null) {
            stmt.bindLong(9, quickAnswerEasy);
        }
 
        Integer quickAnswerMedium = entity.getQuickAnswerMedium();
        if (quickAnswerMedium != null) {
            stmt.bindLong(10, quickAnswerMedium);
        }
 
        Integer quickAnswerHard = entity.getQuickAnswerHard();
        if (quickAnswerHard != null) {
            stmt.bindLong(11, quickAnswerHard);
        }
 
        Integer timeForBonusEasy = entity.getTimeForBonusEasy();
        if (timeForBonusEasy != null) {
            stmt.bindLong(12, timeForBonusEasy);
        }
 
        Integer timeForBonusMedium = entity.getTimeForBonusMedium();
        if (timeForBonusMedium != null) {
            stmt.bindLong(13, timeForBonusMedium);
        }
 
        Integer timeForBonusHard = entity.getTimeForBonusHard();
        if (timeForBonusHard != null) {
            stmt.bindLong(14, timeForBonusHard);
        }
 
        Integer wrongAnswerEasy = entity.getWrongAnswerEasy();
        if (wrongAnswerEasy != null) {
            stmt.bindLong(15, wrongAnswerEasy);
        }
 
        Integer wrongAnswerMedium = entity.getWrongAnswerMedium();
        if (wrongAnswerMedium != null) {
            stmt.bindLong(16, wrongAnswerMedium);
        }
 
        Integer wrongAnswerHard = entity.getWrongAnswerHard();
        if (wrongAnswerHard != null) {
            stmt.bindLong(17, wrongAnswerHard);
        }
 
        Integer cluePenaltyEasy = entity.getCluePenaltyEasy();
        if (cluePenaltyEasy != null) {
            stmt.bindLong(18, cluePenaltyEasy);
        }
 
        Integer cluePenaltyMedium = entity.getCluePenaltyMedium();
        if (cluePenaltyMedium != null) {
            stmt.bindLong(19, cluePenaltyMedium);
        }
 
        Integer cluePenaltyHard = entity.getCluePenaltyHard();
        if (cluePenaltyHard != null) {
            stmt.bindLong(20, cluePenaltyHard);
        }
 
        Integer skipPuzzlePenalty = entity.getSkipPuzzlePenalty();
        if (skipPuzzlePenalty != null) {
            stmt.bindLong(21, skipPuzzlePenalty);
        }
 
        Integer totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindLong(22, totalTime);
        }
 
        Integer totalPuzzles = entity.getTotalPuzzles();
        if (totalPuzzles != null) {
            stmt.bindLong(23, totalPuzzles);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Configuration readEntity(Cursor cursor, int offset) {
        Configuration entity = new Configuration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // objectId
            new java.util.Date(cursor.getLong(offset + 2)), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gameRules
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // base64EncodedPublicKey
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // correctAnswerEasy
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // correctAnswerMedium
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // correctAnswerHard
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // quickAnswerEasy
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // quickAnswerMedium
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // quickAnswerHard
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // timeForBonusEasy
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // timeForBonusMedium
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // timeForBonusHard
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // wrongAnswerEasy
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // wrongAnswerMedium
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // wrongAnswerHard
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // cluePenaltyEasy
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // cluePenaltyMedium
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // cluePenaltyHard
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // skipPuzzlePenalty
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // totalTime
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22) // totalPuzzles
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Configuration entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.getString(offset + 1));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setGameRules(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBase64EncodedPublicKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCorrectAnswerEasy(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCorrectAnswerMedium(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCorrectAnswerHard(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setQuickAnswerEasy(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setQuickAnswerMedium(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setQuickAnswerHard(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setTimeForBonusEasy(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTimeForBonusMedium(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTimeForBonusHard(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setWrongAnswerEasy(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setWrongAnswerMedium(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setWrongAnswerHard(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setCluePenaltyEasy(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setCluePenaltyMedium(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setCluePenaltyHard(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setSkipPuzzlePenalty(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setTotalTime(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setTotalPuzzles(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Configuration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Configuration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
