package com.evilgeniustechnologies.Wordrific.daomodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PUZZLE.
*/
public class PuzzleDao extends AbstractDao<Puzzle, Long> {

    public static final String TABLENAME = "PUZZLE";

    /**
     * Properties of entity Puzzle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property UpdatedAt = new Property(2, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Number = new Property(3, Integer.class, "number", false, "NUMBER");
        public final static Property Set = new Property(4, Integer.class, "set", false, "SET");
        public final static Property Image = new Property(5, byte[].class, "image", false, "IMAGE");
        public final static Property Answer = new Property(6, String.class, "answer", false, "ANSWER");
        public final static Property Clues = new Property(7, String.class, "clues", false, "CLUES");
        public final static Property BonusClue = new Property(8, String.class, "bonusClue", false, "BONUS_CLUE");
        public final static Property Difficulty = new Property(9, Integer.class, "difficulty", false, "DIFFICULTY");
    };


    public PuzzleDao(DaoConfig config) {
        super(config);
    }
    
    public PuzzleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PUZZLE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'OBJECT_ID' TEXT NOT NULL ," + // 1: objectId
                "'UPDATED_AT' INTEGER NOT NULL ," + // 2: updatedAt
                "'NUMBER' INTEGER," + // 3: number
                "'SET' INTEGER," + // 4: set
                "'IMAGE' BLOB," + // 5: image
                "'ANSWER' TEXT," + // 6: answer
                "'CLUES' TEXT," + // 7: clues
                "'BONUS_CLUE' TEXT," + // 8: bonusClue
                "'DIFFICULTY' INTEGER);"); // 9: difficulty
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PUZZLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Puzzle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectId());
        stmt.bindLong(3, entity.getUpdatedAt().getTime());
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(4, number);
        }
 
        Integer set = entity.getSet();
        if (set != null) {
            stmt.bindLong(5, set);
        }
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(6, image);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(7, answer);
        }
 
        String clues = entity.getClues();
        if (clues != null) {
            stmt.bindString(8, clues);
        }
 
        String bonusClue = entity.getBonusClue();
        if (bonusClue != null) {
            stmt.bindString(9, bonusClue);
        }
 
        Integer difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindLong(10, difficulty);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Puzzle readEntity(Cursor cursor, int offset) {
        Puzzle entity = new Puzzle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // objectId
            new java.util.Date(cursor.getLong(offset + 2)), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // number
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // set
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // clues
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bonusClue
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // difficulty
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Puzzle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.getString(offset + 1));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSet(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
        entity.setAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClues(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBonusClue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDifficulty(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Puzzle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Puzzle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
