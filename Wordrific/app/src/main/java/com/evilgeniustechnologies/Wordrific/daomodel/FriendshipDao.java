package com.evilgeniustechnologies.Wordrific.daomodel;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIENDSHIP.
*/
public class FriendshipDao extends AbstractDao<Friendship, Long> {

    public static final String TABLENAME = "FRIENDSHIP";

    /**
     * Properties of entity Friendship.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property UpdatedAt = new Property(2, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property SeenRequest = new Property(3, Boolean.class, "seenRequest", false, "SEEN_REQUEST");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property RequestSenderObjectId = new Property(5, String.class, "requestSenderObjectId", false, "REQUEST_SENDER_OBJECT_ID");
        public final static Property RequestReceiverObjectId = new Property(6, String.class, "requestReceiverObjectId", false, "REQUEST_RECEIVER_OBJECT_ID");
        public final static Property RequestSenderId = new Property(7, Long.class, "requestSenderId", false, "REQUEST_SENDER_ID");
        public final static Property RequestReceiverId = new Property(8, Long.class, "requestReceiverId", false, "REQUEST_RECEIVER_ID");
    };

    private DaoSession daoSession;

    private Query<Friendship> user_RequestSenderFriendshipsQuery;
    private Query<Friendship> user_RequestReceiverFriendshipsQuery;

    public FriendshipDao(DaoConfig config) {
        super(config);
    }
    
    public FriendshipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIENDSHIP' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'OBJECT_ID' TEXT NOT NULL ," + // 1: objectId
                "'UPDATED_AT' INTEGER NOT NULL ," + // 2: updatedAt
                "'SEEN_REQUEST' INTEGER," + // 3: seenRequest
                "'STATUS' INTEGER," + // 4: status
                "'REQUEST_SENDER_OBJECT_ID' TEXT NOT NULL ," + // 5: requestSenderObjectId
                "'REQUEST_RECEIVER_OBJECT_ID' TEXT NOT NULL ," + // 6: requestReceiverObjectId
                "'REQUEST_SENDER_ID' INTEGER," + // 7: requestSenderId
                "'REQUEST_RECEIVER_ID' INTEGER);"); // 8: requestReceiverId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIENDSHIP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friendship entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectId());
        stmt.bindLong(3, entity.getUpdatedAt().getTime());
 
        Boolean seenRequest = entity.getSeenRequest();
        if (seenRequest != null) {
            stmt.bindLong(4, seenRequest ? 1l: 0l);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
        stmt.bindString(6, entity.getRequestSenderObjectId());
        stmt.bindString(7, entity.getRequestReceiverObjectId());
 
        Long requestSenderId = entity.getRequestSenderId();
        if (requestSenderId != null) {
            stmt.bindLong(8, requestSenderId);
        }
 
        Long requestReceiverId = entity.getRequestReceiverId();
        if (requestReceiverId != null) {
            stmt.bindLong(9, requestReceiverId);
        }
    }

    @Override
    protected void attachEntity(Friendship entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Friendship readEntity(Cursor cursor, int offset) {
        Friendship entity = new Friendship( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // objectId
            new java.util.Date(cursor.getLong(offset + 2)), // updatedAt
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // seenRequest
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.getString(offset + 5), // requestSenderObjectId
            cursor.getString(offset + 6), // requestReceiverObjectId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // requestSenderId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // requestReceiverId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Friendship entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.getString(offset + 1));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSeenRequest(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRequestSenderObjectId(cursor.getString(offset + 5));
        entity.setRequestReceiverObjectId(cursor.getString(offset + 6));
        entity.setRequestSenderId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setRequestReceiverId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Friendship entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Friendship entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "requestSenderFriendships" to-many relationship of User. */
    public List<Friendship> _queryUser_RequestSenderFriendships(Long requestSenderId) {
        synchronized (this) {
            if (user_RequestSenderFriendshipsQuery == null) {
                QueryBuilder<Friendship> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RequestSenderId.eq(null));
                user_RequestSenderFriendshipsQuery = queryBuilder.build();
            }
        }
        Query<Friendship> query = user_RequestSenderFriendshipsQuery.forCurrentThread();
        query.setParameter(0, requestSenderId);
        return query.list();
    }

    /** Internal query to resolve the "requestReceiverFriendships" to-many relationship of User. */
    public List<Friendship> _queryUser_RequestReceiverFriendships(Long requestReceiverId) {
        synchronized (this) {
            if (user_RequestReceiverFriendshipsQuery == null) {
                QueryBuilder<Friendship> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RequestReceiverId.eq(null));
                user_RequestReceiverFriendshipsQuery = queryBuilder.build();
            }
        }
        Query<Friendship> query = user_RequestReceiverFriendshipsQuery.forCurrentThread();
        query.setParameter(0, requestReceiverId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM FRIENDSHIP T");
            builder.append(" LEFT JOIN USER T0 ON T.'REQUEST_SENDER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN USER T1 ON T.'REQUEST_RECEIVER_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Friendship loadCurrentDeep(Cursor cursor, boolean lock) {
        Friendship entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User requestSender = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setRequestSender(requestSender);
        offset += daoSession.getUserDao().getAllColumns().length;

        User requestReceiver = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setRequestReceiver(requestReceiver);

        return entity;    
    }

    public Friendship loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Friendship> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Friendship> list = new ArrayList<Friendship>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Friendship> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Friendship> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
