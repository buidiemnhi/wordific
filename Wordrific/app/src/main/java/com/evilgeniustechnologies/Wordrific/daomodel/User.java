package com.evilgeniustechnologies.Wordrific.daomodel;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER.
 */
public class User {

    private Long id;
    /** Not-null value. */
    private String objectId;
    /** Not-null value. */
    private java.util.Date updatedAt;
    private String username;
    private String avatarUrl;
    private Integer bestScore;
    private String email;
    private String firstName;
    private String lastName;
    private Integer nextSetToBuy;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Friendship> requestSenderFriendships;
    private List<Friendship> requestReceiverFriendships;
    private List<Score> scores;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String objectId, java.util.Date updatedAt, String username, String avatarUrl, Integer bestScore, String email, String firstName, String lastName, Integer nextSetToBuy) {
        this.id = id;
        this.objectId = objectId;
        this.updatedAt = updatedAt;
        this.username = username;
        this.avatarUrl = avatarUrl;
        this.bestScore = bestScore;
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.nextSetToBuy = nextSetToBuy;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    /** Not-null value. */
    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getAvatarUrl() {
        return avatarUrl;
    }

    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    public Integer getBestScore() {
        return bestScore;
    }

    public void setBestScore(Integer bestScore) {
        this.bestScore = bestScore;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Integer getNextSetToBuy() {
        return nextSetToBuy;
    }

    public void setNextSetToBuy(Integer nextSetToBuy) {
        this.nextSetToBuy = nextSetToBuy;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Friendship> getRequestSenderFriendships() {
        if (requestSenderFriendships == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendshipDao targetDao = daoSession.getFriendshipDao();
            List<Friendship> requestSenderFriendshipsNew = targetDao._queryUser_RequestSenderFriendships(id);
            synchronized (this) {
                if(requestSenderFriendships == null) {
                    requestSenderFriendships = requestSenderFriendshipsNew;
                }
            }
        }
        return requestSenderFriendships;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRequestSenderFriendships() {
        requestSenderFriendships = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Friendship> getRequestReceiverFriendships() {
        if (requestReceiverFriendships == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendshipDao targetDao = daoSession.getFriendshipDao();
            List<Friendship> requestReceiverFriendshipsNew = targetDao._queryUser_RequestReceiverFriendships(id);
            synchronized (this) {
                if(requestReceiverFriendships == null) {
                    requestReceiverFriendships = requestReceiverFriendshipsNew;
                }
            }
        }
        return requestReceiverFriendships;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRequestReceiverFriendships() {
        requestReceiverFriendships = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Score> getScores() {
        if (scores == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ScoreDao targetDao = daoSession.getScoreDao();
            List<Score> scoresNew = targetDao._queryUser_Scores(id);
            synchronized (this) {
                if(scores == null) {
                    scores = scoresNew;
                }
            }
        }
        return scores;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetScores() {
        scores = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
