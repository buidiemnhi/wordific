package com.evilgeniustechnologies.Wordrific.daomodel;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FRIENDSHIP.
 */
public class Friendship {

    private Long id;
    /** Not-null value. */
    private String objectId;
    /** Not-null value. */
    private java.util.Date updatedAt;
    private Boolean seenRequest;
    private Integer status;
    /** Not-null value. */
    private String requestSenderObjectId;
    /** Not-null value. */
    private String requestReceiverObjectId;
    private Long requestSenderId;
    private Long requestReceiverId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FriendshipDao myDao;

    private User requestSender;
    private Long requestSender__resolvedKey;

    private User requestReceiver;
    private Long requestReceiver__resolvedKey;


    public Friendship() {
    }

    public Friendship(Long id) {
        this.id = id;
    }

    public Friendship(Long id, String objectId, java.util.Date updatedAt, Boolean seenRequest, Integer status, String requestSenderObjectId, String requestReceiverObjectId, Long requestSenderId, Long requestReceiverId) {
        this.id = id;
        this.objectId = objectId;
        this.updatedAt = updatedAt;
        this.seenRequest = seenRequest;
        this.status = status;
        this.requestSenderObjectId = requestSenderObjectId;
        this.requestReceiverObjectId = requestReceiverObjectId;
        this.requestSenderId = requestSenderId;
        this.requestReceiverId = requestReceiverId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFriendshipDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getObjectId() {
        return objectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    /** Not-null value. */
    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Boolean getSeenRequest() {
        return seenRequest;
    }

    public void setSeenRequest(Boolean seenRequest) {
        this.seenRequest = seenRequest;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    /** Not-null value. */
    public String getRequestSenderObjectId() {
        return requestSenderObjectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRequestSenderObjectId(String requestSenderObjectId) {
        this.requestSenderObjectId = requestSenderObjectId;
    }

    /** Not-null value. */
    public String getRequestReceiverObjectId() {
        return requestReceiverObjectId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRequestReceiverObjectId(String requestReceiverObjectId) {
        this.requestReceiverObjectId = requestReceiverObjectId;
    }

    public Long getRequestSenderId() {
        return requestSenderId;
    }

    public void setRequestSenderId(Long requestSenderId) {
        this.requestSenderId = requestSenderId;
    }

    public Long getRequestReceiverId() {
        return requestReceiverId;
    }

    public void setRequestReceiverId(Long requestReceiverId) {
        this.requestReceiverId = requestReceiverId;
    }

    /** To-one relationship, resolved on first access. */
    public User getRequestSender() {
        Long __key = this.requestSenderId;
        if (requestSender__resolvedKey == null || !requestSender__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User requestSenderNew = targetDao.load(__key);
            synchronized (this) {
                requestSender = requestSenderNew;
            	requestSender__resolvedKey = __key;
            }
        }
        return requestSender;
    }

    public void setRequestSender(User requestSender) {
        synchronized (this) {
            this.requestSender = requestSender;
            requestSenderId = requestSender == null ? null : requestSender.getId();
            requestSender__resolvedKey = requestSenderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getRequestReceiver() {
        Long __key = this.requestReceiverId;
        if (requestReceiver__resolvedKey == null || !requestReceiver__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User requestReceiverNew = targetDao.load(__key);
            synchronized (this) {
                requestReceiver = requestReceiverNew;
            	requestReceiver__resolvedKey = __key;
            }
        }
        return requestReceiver;
    }

    public void setRequestReceiver(User requestReceiver) {
        synchronized (this) {
            this.requestReceiver = requestReceiver;
            requestReceiverId = requestReceiver == null ? null : requestReceiver.getId();
            requestReceiver__resolvedKey = requestReceiverId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
